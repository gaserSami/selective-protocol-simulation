/*
 * Frame_m.h
 */

#ifndef __FRAME_M_H
#define __FRAME_M_H

#if defined(__clang__)
#pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION != OMNETPP_VERSION)
#error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class Frame; // forward declaration
// includes and namespaces omitted
#include <string>            // std::string
#include <bitset>            // std::bitset
typedef std::bitset<8> byte; // byte type

// frame types for BYTE STUFFING
#define FLAG '#'
#define ESC '/'

// Frame Base class
class Frame_Base : public ::omnetpp::cPacket
{
protected:
  int dataSeqNr = 0;           // data sequence number
  int type = 0;                // frame type 0: data, 1: ack, 2: nack
  int ackSeqNr = 0;            // ack sequence number
  omnetpp::opp_string payload; // payload
  byte trailer;                // trailer

private:
  // copy method
  void copy(const Frame_Base &other);

protected:
  bool operator==(const Frame_Base &) = delete;
  // make constructors protected to avoid instantiation
  Frame_Base(const char *name = nullptr, short kind = 0);
  Frame_Base(const Frame_Base &other);
  // assignment operator
  Frame_Base &operator=(const Frame_Base &other);

public:
  virtual ~Frame_Base();                   // destructor
  virtual Frame_Base *dup() const override // virtual copy constructor
  {
    return new Frame_Base(*this);
  }
  virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
  virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

  // getters and setters
  virtual int getDataSeqNr() const;         // returns dataSeqNr
  virtual void setDataSeqNr(int dataSeqNr); // sets dataSeqNr

  virtual int getType() const;    // returns type
  virtual void setType(int type); // sets type

  virtual int getAckSeqNr() const;        // returns ackSeqNr
  virtual void setAckSeqNr(int ackSeqNr); // sets ackSeqNr

  virtual const char *getPayload() const;       // returns payload
  virtual void setPayload(const char *payload); // sets payload

  virtual const byte &getTrailer() const;                                                                          // returns trailer
  virtual byte &getTrailerForUpdate() { return const_cast<byte &>(const_cast<Frame_Base *>(this)->getTrailer()); } // returns trailer for update
  virtual void setTrailer(const byte &trailer);                                                                    // sets trailer
};

// Frame class
class Frame : public Frame_Base
{
private:
  // copy method
  void copy(const Frame &other)
  {
    this->dataSeqNr = other.dataSeqNr; // copy dataSeqNr
    this->type = other.type;           // copy type
    this->ackSeqNr = other.ackSeqNr;   // copy ackSeqNr
    this->payload = other.payload;     // copy payload
    this->trailer = other.trailer;     // copy trailer
  }

  // private methods
  void applyRandomError(int modfiedBit); // applies a random error to the frame
  void applyFraming();                   // applies byte stuffing to the payload and sets it in the payload
  Frame* removeFraming(Frame* frame);       // removes byte stuffing from the payload and sets it in the payload
  void calculateCheckSum();              // calculates the checksum and sets it in the trailer

public:
  // constructors, destructor, assignment operator and virtual copy constructor
  Frame(const char *name = nullptr, short kind = 0) : Frame_Base(name, kind) {} // constructor
  Frame(const Frame &other) : Frame_Base(other) { copy(other); }                // copy constructor
  Frame &operator=(const Frame &other)                                          // assignment operator
  {
    if (this == &other)
      return *this;
    Frame_Base::operator=(other);
    copy(other);
    return *this;
  }
  virtual Frame *dup() const override { return new Frame(*this); } // virtual copy constructor

  // public methods
  bool checkCheckSum();                                                                                        // returns true if the checksum is correct
  void setFrameInfo(int dataSeqNr, int type, int ackSeqNr, const char *payload, bool errored, int modfiedBit); // sets the frame info
  void removeFraming();                                                                                        // removes byte stuffing from the payload and sets it in the payload
};

namespace omnetpp
{

  inline any_ptr toAnyPtr(const byte *p)
  {
    if (auto obj = as_cObject(p))
      return any_ptr(obj);
    else
      return any_ptr(p);
  }
  template <>
  inline byte *fromAnyPtr(any_ptr ptr) { return ptr.get<byte>(); }
  template <>
  inline Frame_Base *fromAnyPtr(any_ptr ptr) { return check_and_cast<Frame_Base *>(ptr.get<cObject>()); }

} // namespace omnetpp

#endif // ifndef __FRAME_M_H
